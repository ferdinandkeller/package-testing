name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
jobs:
  bump-and-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: true  # so the GITHUB_TOKEN can push

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: latest

      - name: Get current version and calculate new version
        id: version
        run: |
          # extract current version from pyproject.toml
          CURRENT_VERSION=$(grep '^version *=' pyproject.toml | sed 's/^version *= *"\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # split version into parts
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # calculate new version based on bump type
          case "${{ github.event.inputs.bump_type }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Create feature branch
        run: |
          BRANCH_NAME="bump/version-${{ steps.version.outputs.new }}"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Bump version in pyproject.toml
        run: |
          sed -i 's/^version *= *.*/version = "${{ steps.version.outputs.new }}"/' pyproject.toml

      - name: Sync uv.lock
        run: |
          uv sync

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml uv.lock
          git commit -m "Bump version from ${{ steps.version.outputs.current }} to ${{ steps.version.outputs.new }}"

      - name: Push feature branch
        run: |
          git push origin "${{ env.BRANCH_NAME }}"


      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Bump version to ${{ steps.version.outputs.new }}`,
              body: `## Version Bump\n\nThis PR bumps the version from \`${{ steps.version.outputs.current }}\` to \`${{ steps.version.outputs.new }}\`.\n\n### Type: ${{ github.event.inputs.bump_type }}\n\n### Changes:\n- Updated version in \`pyproject.toml\`\n- Synchronized \`uv.lock\`\n\nThis PR will be automatically merged after checks pass.`,
              head: `${{ env.BRANCH_NAME }}`,
              base: context.ref.replace('refs/heads/', ''),
            });
            
            core.setOutput('pr_number', pr.data.number);
            core.setOutput('pr_url', pr.data.html_url);

      - name: Enable auto-merge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.create-pr.outputs.pr_number }},
              merge_method: 'squash'
            });

      - name: Wait for PR to be merged
        uses: actions/github-script@v7
        with:
          script: |
            // poll for PR status
            let pr;
            let attempts = 0;
            const maxAttempts = 30; // 5 minutes with 10 second intervals
            
            while (attempts < maxAttempts) {
              pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ steps.create-pr.outputs.pr_number }}
              });
              
              if (pr.data.merged) {
                console.log('PR has been merged!');
                break;
              }
              
              console.log(`Waiting for PR to be merged... (attempt ${attempts + 1}/${maxAttempts})`);
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
              attempts++;
            }
            
            if (!pr.data.merged) {
              throw new Error('PR was not merged within the timeout period');
            }

      - name: Checkout main branch with merged changes
        run: |
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }}

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.new }}" \
            -m "Release v${{ steps.version.outputs.new }}"
          git push origin "v${{ steps.version.outputs.new }}"
