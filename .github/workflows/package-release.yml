name: Release Package

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version Bump Type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
jobs:
  bump-and-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: true  # so the GITHUB_TOKEN can push

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: latest

      - name: Get current version and calculate new version
        id: version
        run: |
          # extract current version from pyproject.toml
          CURRENT_VERSION=$(grep '^version *=' pyproject.toml | sed 's/^version *= *"\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # split version into parts
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # calculate new version based on bump type
          case "${{ github.event.inputs.bump_type }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      # - name: Create feature branch
      #   run: |
      #     BRANCH_NAME="bump/version-${{ steps.version.outputs.new }}"
      #     git checkout -b "$BRANCH_NAME"
      #     echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV


      # - name: Commit version bump
      #   run: |
      #     git config --local user.email "action@github.com"
      #     git config --local user.name "GitHub Action"
      #     git add pyproject.toml uv.lock
      #     git commit -m "Bump version from ${{ steps.version.outputs.current }} to ${{ steps.version.outputs.new }}"

      # - name: Push feature branch
      #   run: |
      #     git push origin "${{ env.BRANCH_NAME }}"

      - name: Get main branch commit SHA
        id: get_sha
        run: |
          SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/git/refs/heads/main | jq -r .object.sha)
          echo "sha=$SHA" >> $GITHUB_ENV

      - name: Create new branch
        id: create_branch
        run: |
          BRANCH_NAME="bump/version-${{ steps.version.outputs.new }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"ref\":\"refs/heads/$BRANCH_NAME\", \"sha\":\"${{ env.sha }}\"}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs

      - name: Bump version in pyproject.toml
        run: |
          sed -i 's/^version *= *.*/version = "${{ steps.version.outputs.new }}"/' pyproject.toml

      - name: Sync uv.lock
        run: |
          uv sync

      - name: Commit changes
        run: |
          BRANCH_NAME="${{ env.branch_name }}"
          FILES_CHANGED=$(git status --porcelain | awk '{print $2}')
          for file in $FILES_CHANGED; do
            CONTENT=$(base64 -w 0 $file)
            FILENAME=$(basename $file)
            SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=$BRANCH_NAME | jq -r .sha)
            if [ "$SHA" == "null" ]; then
              SHA=""
            fi
            curl -s -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d "{\"message\":\"Update $FILENAME\", \"content\":\"$CONTENT\", \"branch\":\"$BRANCH_NAME\", \"sha\":\"$SHA\"}" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file
          done

      - name: Create Pull Request
        run: |
          BRANCH_NAME="${{ env.branch_name }}"
          PR_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"title\":\"Bump version to ${{ steps.version.outputs.new }}\", \"head\":\"$BRANCH_NAME\", \"base\":\"main\", \"body\":\"Bump version from ${{ steps.version.outputs.current }} to ${{ steps.version.outputs.new }}\"}" \
            https://api.github.com/repos/${{ github.repository }}/pulls)
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r .number)
          echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV

      - name: Merge Pull Request
        run: |
          BRANCH_NAME="${{ env.branch_name }}"
          PR_NUMBER="${{ env.pr_number }}"
          curl -s -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"commit_title\":\"Bump version to ${{ steps.version.outputs.new }} #$PR_NUMBER\", \"merge_method\":\"squash\"}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge

      - name: Delete Bump Branch
        run: |
          BRANCH_NAME="${{ env.branch_name }}"
          curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/heads/$BRANCH_NAME

      - name: Create Version Tag
        run: |
          TAG_NAME="v${{ steps.version.outputs.new }}"
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"tag\":\"$TAG_NAME\", \"message\":\"Release version $TAG_NAME\", \"object\":\"${{ env.sha }}\", \"type\":\"commit\"}" \
            https://api.github.com/repos/${{ github.repository }}/git/tags
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"tag\":\"$TAG_NAME\", \"message\":\"Release version $TAG_NAME\", \"object\":\"${{ env.sha }}\", \"type\":\"commit\"}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs
